{"version":3,"sources":["assets/logo.svg","features/auth/components/Layout.tsx","components/Form/Form.tsx","components/Form/FieldWrapper.tsx","components/Form/InputField.tsx","features/auth/components/LoginForm.tsx","features/auth/routes/Login.tsx","features/auth/routes/index.tsx"],"names":["Layout","children","title","Head","className","to","src","logo","alt","Form","onSubmit","options","id","schema","methods","useForm","resolver","zodResolver","clsx","handleSubmit","FieldWrapper","props","label","error","message","role","aria-label","InputField","type","registration","z","username","min","password","LoginForm","onSuccess","useAuthStore","login","isLoading","addNotification","useNotificationStore","handleLogin","values","a","register","formState","errors","Login","navigate","useNavigate","isLoggedIn","useEffect","AuthRoutes","path","element"],"mappings":"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","file":"static/js/4.38876b69.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as React from 'react';\n\nimport logo from '@/assets/logo.svg';\nimport { Link } from '@/components/Elements';\nimport { Head } from '@/components/Head';\n\ntype LayoutProps = {\n  children: React.ReactNode;\n  title: string;\n};\n\nexport const Layout = ({ children, title }: LayoutProps) => {\n  return (\n    <>\n      <Head title={title} />\n      <div className=\"min-h-screen bg-gray-50 flex flex-col justify-center py-12 sm:px-6 lg:px-8\">\n        <div className=\"sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"flex justify-center\">\n            <Link className=\"flex items-center text-white\" to=\"/\">\n              <img className=\"h-24 w-auto\" src={logo} alt=\"Workflow\" />\n            </Link>\n          </div>\n\n          <h2 className=\"mt-3 text-center text-3xl font-extrabold text-gray-900\">{title}</h2>\n        </div>\n\n        <div className=\"mt-8 sm:mx-auto sm:w-full sm:max-w-md\">\n          <div className=\"bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10\">{children}</div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import { zodResolver } from '@hookform/resolvers/zod';\nimport clsx from 'clsx';\nimport * as React from 'react';\nimport { useForm, UseFormReturn, SubmitHandler, UseFormProps } from 'react-hook-form';\nimport { ZodType, ZodTypeDef } from 'zod';\n\ntype FormProps<\n  TFormValues extends Record<string, unknown> = Record<string, unknown>,\n  Schema extends ZodType<unknown, ZodTypeDef, unknown> = ZodType<unknown, ZodTypeDef, unknown>\n> = {\n  className?: string;\n  onSubmit: SubmitHandler<TFormValues>;\n  children: (methods: UseFormReturn<TFormValues>) => React.ReactNode;\n  options?: UseFormProps<TFormValues>;\n  id?: string;\n  schema?: Schema;\n};\n\nexport const Form = <\n  TFormValues extends Record<string, unknown> = Record<string, unknown>,\n  Schema extends ZodType<unknown, ZodTypeDef, unknown> = ZodType<unknown, ZodTypeDef, unknown>\n>({\n  onSubmit,\n  children,\n  className,\n  options,\n  id,\n  schema,\n}: FormProps<TFormValues, Schema>) => {\n  const methods = useForm<TFormValues>({ ...options, resolver: schema && zodResolver(schema) });\n  return (\n    <form\n      className={clsx('space-y-6', className)}\n      onSubmit={methods.handleSubmit(onSubmit)}\n      id={id}\n    >\n      {children(methods)}\n    </form>\n  );\n};\n","import clsx from 'clsx';\nimport * as React from 'react';\nimport { FieldError } from 'react-hook-form';\n\ntype FieldWrapperProps = {\n  label?: string;\n  className?: string;\n  children: React.ReactNode;\n  error?: FieldError | undefined;\n  description?: string;\n};\n\nexport type FieldWrapperPassThroughProps = Omit<FieldWrapperProps, 'className' | 'children'>;\n\nexport const FieldWrapper = (props: FieldWrapperProps) => {\n  const { label, className, error, children } = props;\n  return (\n    <div>\n      <label className={clsx('block text-sm font-medium text-gray-700', className)}>\n        {label}\n        <div className=\"mt-1\">{children}</div>\n      </label>\n      {error?.message && (\n        <div role=\"alert\" aria-label={error.message} className=\"text-sm font-semibold text-red-500\">\n          {error.message}\n        </div>\n      )}\n    </div>\n  );\n};\n","import clsx from 'clsx';\nimport { UseFormRegisterReturn } from 'react-hook-form';\n\nimport { FieldWrapper, FieldWrapperPassThroughProps } from './FieldWrapper';\n\ntype InputFieldProps = FieldWrapperPassThroughProps & {\n  type?: 'text' | 'email' | 'password';\n  className?: string;\n  registration: Partial<UseFormRegisterReturn>;\n};\n\nexport const InputField = (props: InputFieldProps) => {\n  const { type = 'text', label, className, registration, error } = props;\n  return (\n    <FieldWrapper label={label} error={error}>\n      <input\n        type={type}\n        className={clsx(\n          'appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm',\n          className\n        )}\n        {...registration}\n      />\n    </FieldWrapper>\n  );\n};\n","import * as z from 'zod';\n\nimport { Button } from '@/components/Elements';\nimport { Form, InputField } from '@/components/Form';\nimport { useAuthStore } from '@/stores/auth';\nimport { useNotificationStore } from '@/stores/notifications';\n\nconst schema = z.object({\n  username: z.string().min(1, 'Required'),\n  password: z.string().min(1, 'Required'),\n});\n\ntype LoginValues = {\n  username: string;\n  password: string;\n};\n\ntype LoginFormProps = {\n  onSuccess: () => void;\n};\n\nexport const LoginForm = ({ onSuccess }: LoginFormProps) => {\n  const { login, isLoading } = useAuthStore();\n  const { addNotification } = useNotificationStore();\n\n  const handleLogin = async (values: LoginValues) => {\n    try {\n      await login(values.username, values.password);\n      onSuccess();\n    } catch (e) {\n      addNotification({\n        type: 'error',\n        title: 'Error',\n        message: 'Invalid username or password',\n      });\n    }\n  };\n\n  return (\n    <div>\n      <Form<LoginValues, typeof schema> onSubmit={handleLogin} schema={schema}>\n        {({ register, formState }) => (\n          <>\n            <InputField\n              type=\"text\"\n              label=\"Username\"\n              error={formState.errors['username']}\n              registration={register('username')}\n            />\n            <InputField\n              type=\"password\"\n              label=\"Password\"\n              error={formState.errors['password']}\n              registration={register('password')}\n            />\n            <div>\n              <Button isLoading={isLoading} type=\"submit\" className=\"w-full\">\n                Log in\n              </Button>\n            </div>\n          </>\n        )}\n      </Form>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useNavigate } from 'react-router';\n\nimport { useAuthStore } from '@/stores/auth';\n\nimport { Layout } from '../components/Layout';\nimport { LoginForm } from '../components/LoginForm';\n\nexport const Login = () => {\n  const navigate = useNavigate();\n  const { isLoggedIn } = useAuthStore();\n\n  useEffect(() => {\n    if (isLoggedIn) {\n      navigate('/images');\n    } else {\n      navigate('/auth/login');\n    }\n  }, [isLoggedIn, navigate]);\n\n  return (\n    <Layout title=\"Log in to your account\">\n      <LoginForm onSuccess={() => navigate('/images')} />\n    </Layout>\n  );\n};\n","import { Route, Routes } from 'react-router-dom';\n\nimport { Login } from './Login';\n\nexport const AuthRoutes = () => {\n  return (\n    <Routes>\n      <Route path=\"login\" element={<Login />} />\n    </Routes>\n  );\n};\n"],"sourceRoot":""}